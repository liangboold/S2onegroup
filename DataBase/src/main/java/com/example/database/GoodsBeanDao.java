package com.example.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_BEAN".
*/
public class GoodsBeanDao extends AbstractDao<GoodsBean, Long> {

    public static final String TABLENAME = "GOODS_BEAN";

    /**
     * Properties of entity GoodsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoryId = new Property(1, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property GoodsDesc = new Property(2, String.class, "goodsDesc", false, "GOODS_DESC");
        public final static Property GoodsDefaultIcon = new Property(3, String.class, "goodsDefaultIcon", false, "GOODS_DEFAULT_ICON");
        public final static Property GoodsDefaultPrice = new Property(4, String.class, "goodsDefaultPrice", false, "GOODS_DEFAULT_PRICE");
        public final static Property GoodsDefaultSku = new Property(5, String.class, "goodsDefaultSku", false, "GOODS_DEFAULT_SKU");
        public final static Property GoodsCount = new Property(6, int.class, "goodsCount", false, "GOODS_COUNT");
        public final static Property Ischeck = new Property(7, Boolean.class, "ischeck", false, "ISCHECK");
    }


    public GoodsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 1: categoryId
                "\"GOODS_DESC\" TEXT," + // 2: goodsDesc
                "\"GOODS_DEFAULT_ICON\" TEXT," + // 3: goodsDefaultIcon
                "\"GOODS_DEFAULT_PRICE\" TEXT," + // 4: goodsDefaultPrice
                "\"GOODS_DEFAULT_SKU\" TEXT," + // 5: goodsDefaultSku
                "\"GOODS_COUNT\" INTEGER NOT NULL ," + // 6: goodsCount
                "\"ISCHECK\" INTEGER);"); // 7: ischeck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCategoryId());
 
        String goodsDesc = entity.getGoodsDesc();
        if (goodsDesc != null) {
            stmt.bindString(3, goodsDesc);
        }
 
        String goodsDefaultIcon = entity.getGoodsDefaultIcon();
        if (goodsDefaultIcon != null) {
            stmt.bindString(4, goodsDefaultIcon);
        }
 
        String goodsDefaultPrice = entity.getGoodsDefaultPrice();
        if (goodsDefaultPrice != null) {
            stmt.bindString(5, goodsDefaultPrice);
        }
 
        String goodsDefaultSku = entity.getGoodsDefaultSku();
        if (goodsDefaultSku != null) {
            stmt.bindString(6, goodsDefaultSku);
        }
        stmt.bindLong(7, entity.getGoodsCount());
 
        Boolean ischeck = entity.getIscheck();
        if (ischeck != null) {
            stmt.bindLong(8, ischeck ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCategoryId());
 
        String goodsDesc = entity.getGoodsDesc();
        if (goodsDesc != null) {
            stmt.bindString(3, goodsDesc);
        }
 
        String goodsDefaultIcon = entity.getGoodsDefaultIcon();
        if (goodsDefaultIcon != null) {
            stmt.bindString(4, goodsDefaultIcon);
        }
 
        String goodsDefaultPrice = entity.getGoodsDefaultPrice();
        if (goodsDefaultPrice != null) {
            stmt.bindString(5, goodsDefaultPrice);
        }
 
        String goodsDefaultSku = entity.getGoodsDefaultSku();
        if (goodsDefaultSku != null) {
            stmt.bindString(6, goodsDefaultSku);
        }
        stmt.bindLong(7, entity.getGoodsCount());
 
        Boolean ischeck = entity.getIscheck();
        if (ischeck != null) {
            stmt.bindLong(8, ischeck ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsBean readEntity(Cursor cursor, int offset) {
        GoodsBean entity = new GoodsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // categoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsDesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsDefaultIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodsDefaultPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodsDefaultSku
            cursor.getInt(offset + 6), // goodsCount
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // ischeck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryId(cursor.getInt(offset + 1));
        entity.setGoodsDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodsDefaultIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsDefaultPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodsDefaultSku(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodsCount(cursor.getInt(offset + 6));
        entity.setIscheck(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
